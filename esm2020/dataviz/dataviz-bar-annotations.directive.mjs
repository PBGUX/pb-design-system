import { Directive, EventEmitter, forwardRef, Inject, Input, Output } from '@angular/core';
import { select as d3_select } from 'd3-selection';
import { easeQuadInOut as d3_easeQuadInOut } from 'd3-ease';
import { PbdsDatavizBarComponent } from './dataviz-bar.component';
import * as i0 from "@angular/core";
const ANNOTATION_MARGIN_TOP = 62;
const ANNOTATION_OFFSET = -22;
const ANNOTATION_COMMENT_OFFSET = -47;
const TRANSITION_DURATION = 1000;
const TRANSITION_DELAY = 500;
export class PbdsBarAnnotationsDirective {
    constructor(component) {
        this.component = component;
        this.annotationsHilight = null;
        this.annotationClicked = new EventEmitter();
        component.marginTop = ANNOTATION_MARGIN_TOP;
    }
    ngOnInit() {
        this.annotationsGroup = this.component.svg.append('g').attr('class', 'annotations');
        this.hilightBox = this.annotationsGroup
            .append('rect')
            .classed('annotations-hilight', true)
            .attr('opacity', 0)
            .attr('width', this.component.xAxisScale.bandwidth())
            .attr('height', this.component.height)
            .attr('transform', `translate(${0}, ${0})`);
        this.update();
    }
    ngOnChanges(changes) {
        if (changes && changes.annotationsHilight && !changes.annotationsHilight.firstChange) {
            if (changes.annotationsHilight.currentValue) {
                this.updateHilight();
            }
            else {
                this.hilightBox.transition().duration(200).attr('opacity', 0);
            }
        }
    }
    update() {
        const isAnotations = this.annotations;
        const isIncidents = this.annotations?.incidents?.length > 0;
        const isComments = this.annotations?.comments?.length > 0;
        const bandwidth = this.component.xAxisScale.bandwidth();
        if (isAnotations && isIncidents) {
            this.annotationsGroup
                .selectAll('g.incident')
                .data(this.annotations.incidents)
                .join((enter) => {
                const g = enter.append('g').attr('class', 'incident');
                g.attr('transform', (d, i) => {
                    const x = this.component.xAxisScale(d.key) + bandwidth / 2;
                    const y = ANNOTATION_OFFSET;
                    return `translate(${x}, ${y})`;
                }).attr('index', (d, i) => i);
                g.append('circle')
                    .attr('r', 0)
                    .attr('cx', 0)
                    .attr('cy', 0)
                    .transition()
                    .duration(TRANSITION_DURATION)
                    .ease(d3_easeQuadInOut)
                    .attr('r', 15);
                g.append('text')
                    .attr('x', 0)
                    .attr('y', 0)
                    .attr('dx', 1)
                    .attr('dy', 9)
                    .attr('text-anchor', 'middle')
                    .text((d) => {
                    return d.icon || '';
                })
                    .attr('style', 'font-size: 0')
                    .transition()
                    .duration(TRANSITION_DURATION)
                    .ease(d3_easeQuadInOut)
                    .attr('style', 'font-size: 17px');
                return g;
            }, (update) => {
                update
                    .transition()
                    .duration(TRANSITION_DURATION)
                    .ease(d3_easeQuadInOut)
                    .attr('transform', (d) => {
                    const x = this.component.xAxisScale(d.key) + bandwidth / 2;
                    const y = ANNOTATION_OFFSET;
                    return `translate(${x}, ${y})`;
                });
                return update;
            }, (exit) => {
                exit.select('circle').transition().duration(TRANSITION_DURATION).attr('r', 0);
                exit.select('text').transition().duration(TRANSITION_DURATION).attr('style', 'font-size: 0');
                return exit.transition().delay(TRANSITION_DELAY).remove();
            })
                .on('mouseover', (event, data) => {
                d3_select(event.currentTarget).classed('hovered', true);
            })
                .on('mouseout', (event, data) => {
                d3_select(event.currentTarget).classed('hovered', false);
            })
                .on('click', (event, data) => {
                // console.log('incident clicked', this.index.get(event.currentTarget.node));
                this.annotationClicked.emit({ event, data, index: +d3_select(event.currentTarget).attr('index') });
            });
        }
        if (isAnotations && isComments) {
            this.annotationsGroup
                .selectAll('g.comment')
                .data(this.annotations.comments)
                .join((enter) => {
                const g = enter.append('g').attr('class', 'comment');
                g.attr('transform', (d) => {
                    const x = this.component.xAxisScale(d.key) + bandwidth / 2;
                    let y = ANNOTATION_OFFSET;
                    const isIncidents = this.annotations?.incidents?.some((incident) => incident.key === d.key);
                    if (isIncidents) {
                        y = ANNOTATION_COMMENT_OFFSET;
                    }
                    return `translate(${x}, ${y})`;
                }).attr('index', (d, i) => i);
                g.append('circle')
                    .attr('r', 0)
                    .attr('cx', 0)
                    .attr('cy', 0)
                    .transition()
                    .duration(TRANSITION_DURATION)
                    .ease(d3_easeQuadInOut)
                    .attr('r', 15);
                g.append('text')
                    .attr('x', 0)
                    .attr('y', 3)
                    .attr('dx', 0)
                    .attr('dy', 5)
                    .attr('text-anchor', 'middle')
                    .text('')
                    .attr('style', 'font-size: 0')
                    .transition()
                    .duration(TRANSITION_DURATION)
                    .ease(d3_easeQuadInOut)
                    .attr('style', 'font-size: 17px');
                return g;
            }, (update) => {
                update
                    .transition()
                    .duration(TRANSITION_DURATION)
                    .ease(d3_easeQuadInOut)
                    .attr('transform', (d) => {
                    const x = this.component.xAxisScale(d.key) + bandwidth / 2;
                    let y = ANNOTATION_OFFSET;
                    const isIncidents = this.annotations?.incidents?.some((incident) => incident.key === d.key);
                    if (isIncidents) {
                        y = ANNOTATION_COMMENT_OFFSET;
                    }
                    return `translate(${x}, ${y})`;
                });
                return update;
            }, (exit) => {
                exit.select('circle').transition().duration(TRANSITION_DURATION).attr('r', 0);
                exit.select('text').transition().duration(TRANSITION_DURATION).attr('style', 'font-size: 0');
                return exit.transition().delay(TRANSITION_DELAY).remove();
            })
                .on('mouseover', (event, data) => {
                d3_select(event.currentTarget).classed('hovered', true);
            })
                .on('mouseout', (event, data) => {
                d3_select(event.currentTarget).classed('hovered', false);
            })
                .on('click', (event, data) => {
                this.annotationClicked.emit({ event, data, index: +d3_select(event.currentTarget).attr('index') });
            });
        }
        // hilight
        if (this.annotationsHilight) {
            this.updateHilight();
        }
        this.component.svg.selectAll('.bar').classed('pbds-annotation-add', true);
    }
    updateHilight() {
        const opacity = this.hilightBox.attr('opacity');
        const duration = opacity === 0 ? 0 : 300;
        this.hilightBox
            .transition()
            .duration(duration)
            .ease(d3_easeQuadInOut)
            .attr('transform', () => {
            const x = this.component.xAxisScale(this.annotationsHilight);
            const y = 0;
            return `translate(${x}, ${y})`;
        })
            .transition()
            .duration(200)
            .attr('opacity', 1);
    }
}
PbdsBarAnnotationsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: PbdsBarAnnotationsDirective, deps: [{ token: forwardRef(() => PbdsDatavizBarComponent) }], target: i0.ɵɵFactoryTarget.Directive });
PbdsBarAnnotationsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.12", type: PbdsBarAnnotationsDirective, selector: "pbds-dataviz-bar[annotations]", inputs: { annotations: "annotations", annotationsHilight: "annotationsHilight" }, outputs: { annotationClicked: "annotationClicked" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: PbdsBarAnnotationsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'pbds-dataviz-bar[annotations]'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => PbdsDatavizBarComponent)]
                }] }]; }, propDecorators: { annotations: [{
                type: Input,
                args: ['annotations']
            }], annotationsHilight: [{
                type: Input,
                args: ['annotationsHilight']
            }], annotationClicked: [{
                type: Output,
                args: ['annotationClicked']
            }] } });
//# sourceMappingURL=data:application/json;base64,