{"version":3,"file":"pb-design-system-column-toggle.mjs","sources":["../../../projects/pb-design-system/column-toggle/column-toggle.component.ts","../../../projects/pb-design-system/column-toggle/column-toggle.component.html","../../../projects/pb-design-system/column-toggle/column-toggle.module.ts","../../../projects/pb-design-system/column-toggle/pb-design-system-column-toggle.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { PbdsColumnToggle } from './column-toggle.interfaces';\n\nlet COUNT = 0;\n\n@Component({\n  selector: 'pbds-column-toggle',\n  templateUrl: './column-toggle.component.html',\n  styles: [\n    `\n      input[type='checkbox'] {\n        width: 1rem;\n        height: 1rem;\n        vertical-align: middle;\n      }\n    `\n  ]\n})\nexport class PbdsColumnToggleComponent {\n  @Input()\n  public label = 'Columns';\n\n  @Input()\n  public showAllLabel = 'Show All';\n\n  @Input()\n  public columns: any[];\n\n  @Input()\n  public storagekey: string | false = false;\n\n  @Input()\n  public minimum = 1;\n\n  @Input()\n  placement = 'bottom-left bottom-right top-left top-right';\n\n  @Output()\n  public toggle: EventEmitter<PbdsColumnToggle> = new EventEmitter();\n\n  public isShowAll = false;\n  public columnStorage: any;\n  public index: number;\n  private totalSelected: number;\n\n  public ngOnInit() {\n    if (this.storagekey) {\n      this.columnStorage = localStorage.getItem(this.storagekey);\n\n      if (this.columnStorage) {\n        this.columnStorage = JSON.parse(this.columnStorage);\n\n        this.columns.map((column) => {\n          const savedColumn = this.columnStorage.find((obj: any) => obj.field === column.field);\n          column.toggle.selected = savedColumn ? savedColumn.toggle.selected : true;\n        });\n      }\n\n      this.setLocalStorage();\n    }\n\n    this.setShowAllChecked();\n\n    this.updateTotalSelected();\n\n    this.index = COUNT++;\n  }\n\n  public toggleColumn($event, column) {\n    const target = $event.target as HTMLInputElement;\n    column.toggle.selected = target.checked;\n\n    this.updateTotalSelected();\n\n    // prevent unchecking all columns\n    if (this.totalSelected < this.minimum) {\n      target.checked = true;\n      column.toggle.selected = true;\n      this.updateTotalSelected();\n      return;\n    }\n\n    this.setLocalStorage();\n\n    this.toggle.emit({\n      showAll: false,\n      column: column,\n      columns: this.columns\n    });\n\n    this.updateTotalSelected();\n    this.setShowAllChecked();\n  }\n\n  public showAllColumns($event: Event) {\n    const target = $event.target as HTMLInputElement;\n    const checked = target.checked;\n\n    this.isShowAll = checked;\n\n    if (checked) {\n      this.columns.map((column) => {\n        if (column.toggle.visible) {\n          column.toggle.selected = true;\n        }\n      });\n    }\n\n    this.setLocalStorage();\n\n    this.toggle.emit({\n      showAll: true,\n      column: null,\n      columns: this.columns\n    });\n\n    this.updateTotalSelected();\n  }\n\n  private setLocalStorage() {\n    if (this.storagekey) {\n      localStorage.setItem(this.storagekey, JSON.stringify(this.columns));\n    }\n  }\n\n  private updateTotalSelected() {\n    this.totalSelected = this.columns.filter((value) => value.toggle.selected && value.toggle.visible).length;\n  }\n\n  setShowAllChecked() {\n    const columnsSelected = this.columns.filter((value) => value.toggle.selected && value.toggle.visible).length;\n    const columnsVisible = this.columns.filter((value) => value.toggle.visible).length;\n\n    this.isShowAll = columnsSelected === columnsVisible;\n  }\n}\n","<div\n  ngbDropdown\n  #columnToggleDropdown=\"ngbDropdown\"\n  [autoClose]=\"'outside'\"\n  class=\"d-inline-block\"\n  container=\"body\"\n  [placement]=\"placement\"\n>\n  <button class=\"btn btn-secondary\" id=\"toggle-column\" ngbDropdownToggle>\n    <i class=\"pbi-icon-mini pbi-column-toggle\" aria-hidden=\"true\"></i>\n    {{ label }}\n  </button>\n\n  <div ngbDropdownMenu aria-labelledby=\"toggle-column\">\n    <label class=\"mb-0\" ngbDropdownItem for=\"pbds-show-all-{{ index }}\">\n      <input\n        id=\"pbds-show-all-{{ index }}\"\n        type=\"checkbox\"\n        [checked]=\"isShowAll\"\n        (change)=\"showAllColumns($event)\"\n        [attr.disabled]=\"isShowAll ? '' : null\"\n      />\n      {{ showAllLabel }}\n    </label>\n\n    <div class=\"dropdown-divider\"></div>\n\n    <ng-container *ngFor=\"let column of columns\">\n      <ng-container *ngIf=\"column.toggle.visible\">\n        <label class=\"mb-0\" ngbDropdownItem for=\"{{ column.field }}-{{ index }}\">\n          <input\n            id=\"{{ column.field }}-{{ index }}\"\n            name=\"{{ column.field }}-{{ index }}\"\n            type=\"checkbox\"\n            [checked]=\"column.toggle.selected\"\n            (change)=\"toggleColumn($event, column)\"\n          />\n          {{ column.header }}</label\n        >\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport { PbdsColumnToggleComponent } from './column-toggle.component';\n\n@NgModule({\n  declarations: [PbdsColumnToggleComponent],\n  imports: [CommonModule, NgbDropdownModule, FormsModule],\n  exports: [PbdsColumnToggleComponent]\n})\nexport class PbdsColumnToggleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;;;;;AAGA,IAAI,KAAK,GAAG,CAAC,CAAC;MAeD,yBAAyB;IAbtC;QAeS,UAAK,GAAG,SAAS,CAAC;QAGlB,iBAAY,GAAG,UAAU,CAAC;QAM1B,eAAU,GAAmB,KAAK,CAAC;QAGnC,YAAO,GAAG,CAAC,CAAC;QAGnB,cAAS,GAAG,6CAA6C,CAAC;QAGnD,WAAM,GAAmC,IAAI,YAAY,EAAE,CAAC;QAE5D,cAAS,GAAG,KAAK,CAAC;KA+F1B;IA1FQ,QAAQ;QACb,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE3D,IAAI,IAAI,CAAC,aAAa,EAAE;gBACtB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAEpD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;oBACtB,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAQ,KAAK,GAAG,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC;oBACtF,MAAM,CAAC,MAAM,CAAC,QAAQ,GAAG,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;iBAC3E,CAAC,CAAC;aACJ;YAED,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE3B,IAAI,CAAC,KAAK,GAAG,KAAK,EAAE,CAAC;KACtB;IAEM,YAAY,CAAC,MAAM,EAAE,MAAM;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,MAA0B,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;QAExC,IAAI,CAAC,mBAAmB,EAAE,CAAC;;QAG3B,IAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,EAAE;YACrC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,MAAM,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC9B,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,OAAO;SACR;QAED,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACf,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAEM,cAAc,CAAC,MAAa;QACjC,MAAM,MAAM,GAAG,MAAM,CAAC,MAA0B,CAAC;QACjD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAE/B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QAEzB,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;gBACtB,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACzB,MAAM,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;iBAC/B;aACF,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACf,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,IAAI;YACZ,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;IAEO,eAAe;QACrB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;SACrE;KACF;IAEO,mBAAmB;QACzB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;KAC3G;IAED,iBAAiB;QACf,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QAC7G,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QAEnF,IAAI,CAAC,SAAS,GAAG,eAAe,KAAK,cAAc,CAAC;KACrD;;sHApHU,yBAAyB;0GAAzB,yBAAyB,6OClBtC,02CA2CA;2FDzBa,yBAAyB;kBAbrC,SAAS;+BACE,oBAAoB,UAEtB;wBACN;;;;;;KAMC;qBACF;8BAIM,KAAK;sBADX,KAAK;gBAIC,YAAY;sBADlB,KAAK;gBAIC,OAAO;sBADb,KAAK;gBAIC,UAAU;sBADhB,KAAK;gBAIC,OAAO;sBADb,KAAK;gBAIN,SAAS;sBADR,KAAK;gBAIC,MAAM;sBADZ,MAAM;;;MEzBI,sBAAsB;;mHAAtB,sBAAsB;oHAAtB,sBAAsB,iBAJlB,yBAAyB,aAC9B,YAAY,EAAE,iBAAiB,EAAE,WAAW,aAC5C,yBAAyB;oHAExB,sBAAsB,YAHxB,CAAC,YAAY,EAAE,iBAAiB,EAAE,WAAW,CAAC;2FAG5C,sBAAsB;kBALlC,QAAQ;mBAAC;oBACR,YAAY,EAAE,CAAC,yBAAyB,CAAC;oBACzC,OAAO,EAAE,CAAC,YAAY,EAAE,iBAAiB,EAAE,WAAW,CAAC;oBACvD,OAAO,EAAE,CAAC,yBAAyB,CAAC;iBACrC;;;ACXD;;;;;;"}