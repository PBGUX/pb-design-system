import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ViewportScroller } from '@angular/common';
import { PbdsDatavizBarStacked } from './dataviz.interfaces';
import { PbdsDatavizService } from './dataviz.service';
import * as i0 from "@angular/core";
export declare class PbdsDatavizBarStackedComponent implements OnInit, OnDestroy, OnChanges {
    private _dataviz;
    private _element;
    private _scroll;
    chartClass: boolean;
    stackedBarClass: boolean;
    data: Array<PbdsDatavizBarStacked>;
    width: number;
    height: number;
    type: 'low' | 'medium' | 'high' | 'debug';
    marginTop: number;
    marginRight: number;
    marginBottom: number;
    marginLeft: number;
    hideXAxis: boolean;
    xAxisFormatType: 'number' | 'time';
    xAxisFormatString: string;
    xAxisTitle: string | null;
    yAxisFormatType: 'number' | 'time';
    yAxisFormatString: string;
    yAxisTicks: number;
    yAxisMaxBuffer: number;
    hideLegend: boolean;
    legendWidth: number;
    legendPosition: 'right' | 'bottom';
    legendLabelFormatType: 'number' | 'time';
    legendLabelFormatString: string;
    tooltipHeadingFormatType: 'time';
    tooltipHeadingFormatString: string;
    tooltipHeadingSuffix: string;
    tooltipHeadingValueFormatType: 'number';
    tooltipHeadingValueFormatString: string;
    tooltipLabelFormatType: 'time';
    tooltipLabelFormatString: string;
    tooltipValueFormatType: 'number';
    tooltipValueFormatString: string;
    theme: any;
    customColor: boolean;
    colorsArray: any[];
    totalSavings: any;
    rotateXaxis: boolean;
    isDiverging: boolean;
    hovered: EventEmitter<object>;
    clicked: EventEmitter<object>;
    private dataStack;
    private dataKeys;
    private chart;
    private svg;
    private grayBars;
    private mouseBars;
    private bars;
    private margin;
    private colorRange;
    private hideGrayBars;
    private xAxisScale;
    private xAxisCall;
    private xAxis;
    private xAxisFormat;
    private xAxisTickSize;
    private xAxisTickSizeOuter;
    private xAxisTitleMargin;
    private hideXAxisDomain;
    private hideXAxisZero;
    private hideXAxisTicks;
    private hideXGrid;
    private hideYGrid;
    private yAxisMax;
    private yAxisScale;
    private yAxisCall;
    private yAxis;
    private yAxisFormat;
    private yAxisTickSize;
    private yAxisTickSizeOuter;
    private xGrid;
    private xGridCall;
    private yGrid;
    private yGridCall;
    private hideYAxis;
    private hideYAxisZero;
    private hideYAxisDomain;
    private hideYAxisTicks;
    private legendLabelFormat;
    private tooltip;
    private hideTooltip;
    private tooltipHeadingFormat;
    private tooltipHeadingValueFormat;
    private tooltipValueFormat;
    private tooltipLabelFormat;
    private centerline;
    yAxisMin: any;
    constructor(_dataviz: PbdsDatavizService, _element: ElementRef, _scroll: ViewportScroller);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    updateChart: (firstRun?: boolean) => void;
    barMouseOver: (event: any, data: any) => void;
    barMouseOut: () => void;
    barMouseClick: (event: any, data: any) => void;
    legendMouseOver: (event: any, data: any) => void;
    legendMouseOut: () => void;
    legendMouseClick: (event: any, data: any) => void;
    private xAxisFormatter;
    private tooltipShow;
    private tooltipHide;
    private yAxisFormatter;
    static ɵfac: i0.ɵɵFactoryDeclaration<PbdsDatavizBarStackedComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PbdsDatavizBarStackedComponent, "pbds-dataviz-bar-stacked", never, { "data": { "alias": "data"; "required": false; }; "width": { "alias": "width"; "required": false; }; "height": { "alias": "height"; "required": false; }; "type": { "alias": "type"; "required": false; }; "marginTop": { "alias": "marginTop"; "required": false; }; "marginRight": { "alias": "marginRight"; "required": false; }; "marginBottom": { "alias": "marginBottom"; "required": false; }; "marginLeft": { "alias": "marginLeft"; "required": false; }; "hideXAxis": { "alias": "hideXAxis"; "required": false; }; "xAxisFormatType": { "alias": "xAxisFormatType"; "required": false; }; "xAxisFormatString": { "alias": "xAxisFormatString"; "required": false; }; "xAxisTitle": { "alias": "xAxisTitle"; "required": false; }; "yAxisFormatType": { "alias": "yAxisFormatType"; "required": false; }; "yAxisFormatString": { "alias": "yAxisFormatString"; "required": false; }; "yAxisTicks": { "alias": "yAxisTicks"; "required": false; }; "yAxisMaxBuffer": { "alias": "yAxisMaxBuffer"; "required": false; }; "hideLegend": { "alias": "hideLegend"; "required": false; }; "legendWidth": { "alias": "legendWidth"; "required": false; }; "legendPosition": { "alias": "legendPosition"; "required": false; }; "legendLabelFormatType": { "alias": "legendLabelFormatType"; "required": false; }; "legendLabelFormatString": { "alias": "legendLabelFormatString"; "required": false; }; "tooltipHeadingFormatType": { "alias": "tooltipHeadingFormatType"; "required": false; }; "tooltipHeadingFormatString": { "alias": "tooltipHeadingFormatString"; "required": false; }; "tooltipHeadingSuffix": { "alias": "tooltipHeadingSuffix"; "required": false; }; "tooltipHeadingValueFormatType": { "alias": "tooltipHeadingValueFormatType"; "required": false; }; "tooltipHeadingValueFormatString": { "alias": "tooltipHeadingValueFormatString"; "required": false; }; "tooltipLabelFormatType": { "alias": "tooltipLabelFormatType"; "required": false; }; "tooltipLabelFormatString": { "alias": "tooltipLabelFormatString"; "required": false; }; "tooltipValueFormatType": { "alias": "tooltipValueFormatType"; "required": false; }; "tooltipValueFormatString": { "alias": "tooltipValueFormatString"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "customColor": { "alias": "customColor"; "required": false; }; "colorsArray": { "alias": "colorsArray"; "required": false; }; "totalSavings": { "alias": "totalSavings"; "required": false; }; "rotateXaxis": { "alias": "rotateXaxis"; "required": false; }; "isDiverging": { "alias": "isDiverging"; "required": false; }; }, { "hovered": "hovered"; "clicked": "clicked"; }, never, never, false, never>;
}
