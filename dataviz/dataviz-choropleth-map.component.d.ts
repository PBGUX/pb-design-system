import { OnInit, OnChanges, EventEmitter, ElementRef, OnDestroy, SimpleChanges } from '@angular/core';
import { ViewportScroller } from '@angular/common';
import { PbdsDatavizService } from './dataviz.service';
import { PbdsDatavizChoroplethMapData } from './dataviz.interfaces';
import * as i0 from "@angular/core";
export declare class PbdsDatavizChoroplethMapComponent implements OnInit, OnDestroy, OnChanges {
    private _dataviz;
    private _element;
    private _scroll;
    chartClass: boolean;
    choroplethMapClass: boolean;
    data: Array<PbdsDatavizChoroplethMapData>;
    topojson: any;
    feature: string;
    projectionType: any;
    dataField: string;
    mesh: string | null;
    scale: any;
    center: any;
    width: number;
    height: number;
    marginTop: number;
    marginRight: number;
    marginBottom: number;
    marginLeft: number;
    theme: 'classic' | 'ocean' | 'sunset' | 'twilight';
    colorScale: 'threshold' | 'quantile' | 'quantize';
    domain: Array<number>;
    hideTooltip: boolean;
    tooltipHeaderSuffix: string;
    tooltipValueFormatType: 'number';
    tooltipValueFormatString: string;
    hideLegend: boolean;
    legendWidth: number;
    legendLabel: string | null;
    legendValueFormatType: 'number';
    legendValueFormatString: string;
    legendLeft: number;
    legendTop: number;
    hovered: EventEmitter<object>;
    clicked: EventEmitter<object>;
    private projection;
    private geoPath;
    private topojsonFeature;
    private chart;
    private svg;
    private margin;
    private colorRange;
    private colorDomain;
    private tooltip;
    private tooltipValueFormat;
    private legendValueFormat;
    constructor(_dataviz: PbdsDatavizService, _element: ElementRef, _scroll: ViewportScroller);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    updateChart: () => void;
    featureMouseOver: (event: any, data: any) => void;
    featureMouseOut: (event: any, data: any) => void;
    featureMouseClick: (event: any, data: any) => void;
    private tooltipShow;
    private tooltipHide;
    private tooltipMove;
    private tooltipSetPosition;
    legend: (g: any) => void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PbdsDatavizChoroplethMapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PbdsDatavizChoroplethMapComponent, "pbds-dataviz-choropleth-map", never, { "data": { "alias": "data"; "required": false; }; "topojson": { "alias": "topojson"; "required": false; }; "feature": { "alias": "feature"; "required": false; }; "projectionType": { "alias": "projectionType"; "required": false; }; "dataField": { "alias": "dataField"; "required": false; }; "mesh": { "alias": "mesh"; "required": false; }; "scale": { "alias": "scale"; "required": false; }; "center": { "alias": "center"; "required": false; }; "width": { "alias": "width"; "required": false; }; "height": { "alias": "height"; "required": false; }; "marginTop": { "alias": "marginTop"; "required": false; }; "marginRight": { "alias": "marginRight"; "required": false; }; "marginBottom": { "alias": "marginBottom"; "required": false; }; "marginLeft": { "alias": "marginLeft"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "colorScale": { "alias": "colorScale"; "required": false; }; "domain": { "alias": "domain"; "required": false; }; "hideTooltip": { "alias": "hideTooltip"; "required": false; }; "tooltipHeaderSuffix": { "alias": "tooltipHeaderSuffix"; "required": false; }; "tooltipValueFormatType": { "alias": "tooltipValueFormatType"; "required": false; }; "tooltipValueFormatString": { "alias": "tooltipValueFormatString"; "required": false; }; "hideLegend": { "alias": "hideLegend"; "required": false; }; "legendWidth": { "alias": "legendWidth"; "required": false; }; "legendLabel": { "alias": "legendLabel"; "required": false; }; "legendValueFormatType": { "alias": "legendValueFormatType"; "required": false; }; "legendValueFormatString": { "alias": "legendValueFormatString"; "required": false; }; "legendLeft": { "alias": "legendLeft"; "required": false; }; "legendTop": { "alias": "legendTop"; "required": false; }; }, { "hovered": "hovered"; "clicked": "clicked"; }, never, never, false, never>;
}
