import { OnInit, OnChanges, EventEmitter, ElementRef, OnDestroy, SimpleChanges } from '@angular/core';
import { ViewportScroller } from '@angular/common';
import { PbdsDatavizService } from './dataviz.service';
import { PbdsDatavizScatterplot } from './dataviz.interfaces';
import * as i0 from "@angular/core";
export declare class PbdsDatavizScatterplotComponent implements OnInit, OnDestroy, OnChanges {
    private _dataviz;
    private _element;
    private _scroll;
    chartClass: boolean;
    scatterplotClass: boolean;
    data: PbdsDatavizScatterplot[];
    width: number;
    height: number;
    xAxisType: 'date' | 'number' | 'string';
    xAxisFormatString: string;
    xAxisTicks: number;
    yAxisFormatString: string;
    yAxisTicks: number;
    yAxisMinBuffer: number;
    yAxisMaxBuffer: number;
    hideXGrid: boolean;
    hideYGrid: boolean;
    hideLegend: boolean;
    legendWidth: number;
    legendPosition: 'right' | 'bottom';
    legendLabelFormatType: 'number' | 'time';
    tooltipXLabel: string;
    tooltipXValueFormatType: 'number' | 'time';
    tooltipXValueFormatString: string;
    tooltipYLabel: string;
    tooltipYValueFormatType: 'number' | 'time';
    tooltipYValueFormatString: string;
    tooltipValueLabel: string;
    tooltipValueFormatType: 'number' | 'time';
    tooltipValueFormatString: string;
    marginTop: number;
    marginRight: number;
    marginBottom: number;
    marginLeft: number;
    theme: any;
    hovered: EventEmitter<object>;
    clicked: EventEmitter<object>;
    tooltipHovered: EventEmitter<object>;
    tooltipClicked: EventEmitter<object>;
    private chart;
    private svg;
    private margin;
    private colorRange;
    private xAxisScale;
    private xAxisCall;
    private xAxis;
    private xAxisFormat;
    private yAxisScale;
    private yAxisCall;
    private yAxis;
    private yAxisFormat;
    private xGrid;
    private xGridCall;
    private yGrid;
    private yGridCall;
    private valueScale;
    private xAxisTickSize;
    private xAxisTickSizeOuter;
    private yAxisTickSize;
    private yAxisTickSizeOuter;
    private hideXAxis;
    private hideYAxis;
    private hideXAxisDomain;
    private hideYAxisDomain;
    private hideXAxisZero;
    private hideYAxisZero;
    private hideXAxisTicks;
    private hideYAxisTicks;
    private legendLabelFormat;
    private tooltip;
    private hideTooltip;
    private tooltipXValueFormat;
    private tooltipYValueFormat;
    private tooltipValueFormat;
    constructor(_dataviz: PbdsDatavizService, _element: ElementRef, _scroll: ViewportScroller);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    updateChart: () => void;
    legendMouseOver: (event: any, data: any) => void;
    legendMouseOut: () => void;
    legendMouseClick: (event: any, data: any) => void;
    private tooltipShow;
    private tooltipHide;
    private xAxisFormatter;
    private yAxisFormatter;
    private tooltipXValueFormatter;
    private tooltipYValueFormatter;
    private tooltipValueFormatter;
    static ɵfac: i0.ɵɵFactoryDeclaration<PbdsDatavizScatterplotComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PbdsDatavizScatterplotComponent, "pbds-dataviz-scatterplot", never, { "data": "data"; "width": "width"; "height": "height"; "xAxisType": "xAxisType"; "xAxisFormatString": "xAxisFormatString"; "xAxisTicks": "xAxisTicks"; "yAxisFormatString": "yAxisFormatString"; "yAxisTicks": "yAxisTicks"; "yAxisMinBuffer": "yAxisMinBuffer"; "yAxisMaxBuffer": "yAxisMaxBuffer"; "hideXGrid": "hideXGrid"; "hideYGrid": "hideYGrid"; "hideLegend": "hideLegend"; "legendWidth": "legendWidth"; "legendPosition": "legendPosition"; "legendLabelFormatType": "legendLabelFormatType"; "tooltipXLabel": "tooltipXLabel"; "tooltipXValueFormatType": "tooltipXValueFormatType"; "tooltipXValueFormatString": "tooltipXValueFormatString"; "tooltipYLabel": "tooltipYLabel"; "tooltipYValueFormatType": "tooltipYValueFormatType"; "tooltipYValueFormatString": "tooltipYValueFormatString"; "tooltipValueLabel": "tooltipValueLabel"; "tooltipValueFormatType": "tooltipValueFormatType"; "tooltipValueFormatString": "tooltipValueFormatString"; "marginTop": "marginTop"; "marginRight": "marginRight"; "marginBottom": "marginBottom"; "marginLeft": "marginLeft"; "theme": "theme"; }, { "hovered": "hovered"; "clicked": "clicked"; "tooltipHovered": "tooltipHovered"; "tooltipClicked": "tooltipClicked"; }, never, never>;
}
